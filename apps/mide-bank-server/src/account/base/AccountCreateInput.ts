/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  IsOptional,
  IsEnum,
  IsNumber,
  ValidateNested,
} from "class-validator";
import { EnumAccountAccountType } from "./EnumAccountAccountType";
import { BillCreateNestedManyWithoutAccountsInput } from "./BillCreateNestedManyWithoutAccountsInput";
import { Type } from "class-transformer";
import { TransactionCreateNestedManyWithoutAccountsInput } from "./TransactionCreateNestedManyWithoutAccountsInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";

@InputType()
class AccountCreateInput {
  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  accountNumber?: string | null;

  @ApiProperty({
    required: false,
    enum: EnumAccountAccountType,
  })
  @IsEnum(EnumAccountAccountType)
  @IsOptional()
  @Field(() => EnumAccountAccountType, {
    nullable: true,
  })
  accountType?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  balance?: number | null;

  @ApiProperty({
    required: false,
    type: () => BillCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => BillCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => BillCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  bills?: BillCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => TransactionCreateNestedManyWithoutAccountsInput,
  })
  @ValidateNested()
  @Type(() => TransactionCreateNestedManyWithoutAccountsInput)
  @IsOptional()
  @Field(() => TransactionCreateNestedManyWithoutAccountsInput, {
    nullable: true,
  })
  transactions?: TransactionCreateNestedManyWithoutAccountsInput;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;
}

export { AccountCreateInput as AccountCreateInput };
