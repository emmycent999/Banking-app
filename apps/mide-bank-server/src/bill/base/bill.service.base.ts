/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Bill as PrismaBill,
  Account as PrismaAccount,
} from "@prisma/client";

export class BillServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BillCountArgs, "select">): Promise<number> {
    return this.prisma.bill.count(args);
  }

  async bills(args: Prisma.BillFindManyArgs): Promise<PrismaBill[]> {
    return this.prisma.bill.findMany(args);
  }
  async bill(args: Prisma.BillFindUniqueArgs): Promise<PrismaBill | null> {
    return this.prisma.bill.findUnique(args);
  }
  async createBill(args: Prisma.BillCreateArgs): Promise<PrismaBill> {
    return this.prisma.bill.create(args);
  }
  async updateBill(args: Prisma.BillUpdateArgs): Promise<PrismaBill> {
    return this.prisma.bill.update(args);
  }
  async deleteBill(args: Prisma.BillDeleteArgs): Promise<PrismaBill> {
    return this.prisma.bill.delete(args);
  }

  async getAccount(parentId: string): Promise<PrismaAccount | null> {
    return this.prisma.bill
      .findUnique({
        where: { id: parentId },
      })
      .account();
  }
}
